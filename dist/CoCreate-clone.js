/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["CoCreateClone"] = factory();
	else
		root["CoCreateClone"] = factory();
})(this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/CoCreate-clone.js":
/*!*******************************!*\
  !*** ./src/CoCreate-clone.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\nvar CoCreateClone = {\n  __cloneBtnClass: 'cloneBtn',\n  __deleteBtnClass: 'deleteBtn',\n  init: function init() {\n    this.__initButtonEvent();\n  },\n  __initButtonEvent: function __initButtonEvent() {// const self = this;\n    // document.addEventListener('click', function(e) {\n    // \tfor (let i=0; i < e.path.length; i++) {\n    // \t\tlet tag = e.path[i];\n    // \t\tif (tag.classList && tag.classList.contains(self.__cloneBtnClass)) {\n    // \t\t\tself.__cloneElement(tag)\n    // \t\t}\n    // \t\tif (tag.classList && tag.classList.contains(self.__deleteBtnClass)) {\n    // \t\t\tself.__deleteElement(tag)\n    // \t\t}\n    // \t}\n    // }) \n  },\n  cloneElement: function cloneElement(cloneBtn) {\n    var cloneId = cloneBtn.getAttribute(\"data-clone_id\");\n    var clone_name_id = cloneBtn.getAttribute('data-clone_name');\n    var clone_position = cloneBtn.getAttribute('data-clone_position') || 'before';\n    if (!cloneId) return;\n    var clone_name;\n    var input = document.getElementById(clone_name_id);\n\n    if (input) {\n      clone_name = input.value ? input.value : '';\n    }\n\n    var template = document.getElementById(cloneId);\n    if (!template) return;\n    var clonedItem = template.cloneNode(true);\n\n    if (clonedItem.classList.contains('template')) {\n      clonedItem.classList.remove('template');\n    }\n\n    clonedItem.classList.add('clonedItem'); //// remove data-pass_value_id from clonedItem\n\n    clonedItem.removeAttribute('data-pass_value_id');\n    var tags = clonedItem.querySelectorAll(\"*\");\n    tags.forEach(function (tag) {\n      tag.removeAttribute('data-pass_value_id');\n    });\n\n    var prefix = this.__getNewPrefix(clone_name); // clonedItem.setAttribute('prefix', prefix);\n\n\n    this.__createDynamicCloneId(clonedItem, prefix); //. create data-element_id for dnd\n\n\n    this.__createDnDElementId(clonedItem);\n\n    if (clone_position === \"after\") {\n      if (template.nextSibling) {\n        template.parentNode.insertBefore(clonedItem, template.nextSibling);\n      } else {\n        template.parentNode.appendChild(clonedItem);\n      }\n    } else {\n      template.parentNode.insertBefore(clonedItem, template);\n    }\n\n    var domEditorEl = CoCreateHtmlTags.findElementByChild(clonedItem);\n\n    if (domEditorEl) {\n      this.__sendMessageOfClone(domEditorEl, clonedItem, cloneId, clone_position);\n    } //. cloned event\n\n\n    document.dispatchEvent(new CustomEvent('change-content', {\n      detail: {\n        element: clonedItem,\n        type: 'clone-create'\n      }\n    }));\n    template.parentNode.dispatchEvent(new CustomEvent('CoCreate-clone', {\n      detail: {\n        type: 'create'\n      }\n    }));\n    document.dispatchEvent(new CustomEvent('clone-cloned', {\n      detail: {\n        element: clonedItem\n      }\n    }));\n  },\n  deleteElement: function deleteElement(deleteBtn) {\n    var id = deleteBtn.getAttribute('data-clone_id');\n    var item = document.getElementById(id);\n\n    if (item) {\n      var parentNode = item.parentNode;\n      item.remove();\n\n      this.__sendMessageOfDelete(id); //. cloned event\n\n\n      if (parentNode) {\n        document.dispatchEvent(new CustomEvent('change-content', {\n          detail: {\n            element: parentNode,\n            type: 'clone-delete'\n          }\n        }));\n        parentNode.dispatchEvent(new CustomEvent('CoCreate-clone', {\n          detail: {\n            type: 'delete'\n          }\n        }));\n      }\n\n      document.dispatchEvent(new CustomEvent('clone-deleted', {\n        detail: {}\n      }));\n    }\n  },\n  __createDynamicCloneId: function __createDynamicCloneId(clonedItem, prefix) {\n    var self = this;\n    var tags = clonedItem.querySelectorAll(\"*\");\n    var cloneBtns = clonedItem.querySelectorAll('.' + this.__cloneBtnClass);\n    var deleteBtns = clonedItem.querySelectorAll('.' + this.__deleteBtnClass);\n    tags = Array.from(tags);\n    tags.push(clonedItem); // tags.forEach((tag) => {\n    // \tlet name = tag.getAttribute('name');\n    // \tif (name) self.__setAttribute(tag, 'name', name, prefix);\n    // })\n    // self.__setAttribute(clonedItem, 'id', clonedItem.id, prefix)\n\n    clonedItem.setAttribute('id', prefix);\n    /** set data-xxxx=\"[prefix][any]\" **/\n\n    tags.forEach(function (el) {\n      var tag = el.tagName.toLowerCase();\n\n      for (var i = 0; i < el.attributes.length; i++) {\n        var _el$attributes$i = el.attributes[i],\n            name = _el$attributes$i.name,\n            value = _el$attributes$i.value; // const changedValue = value.replace(/\\[prefix\\]/g, prefix);\n\n        var changedValue = value.replace(/{{\\s*clone-name\\s*}}/g, prefix);\n\n        if (/{{\\s*clone-name\\s*}}/g.test(value) && name == \"value\") {\n          switch (tag) {\n            case 'input':\n              el.setAttribute(\"value\", changedValue);\n              break;\n\n            case 'textarea':\n              el.setAttribute(\"value\", changedValue);\n              el.textContent = changedValue;\n              break;\n\n            default:\n              el.innerHTML = changedValue;\n          }\n        }\n\n        el.setAttribute(name, changedValue);\n      }\n    });\n    cloneBtns.forEach(function (btn) {\n      var clone_id = btn.getAttribute('data-clone_id');\n      var clone_name_id = btn.getAttribute('data-clone_name');\n\n      if (clone_id) {\n        var clonableItem = clonedItem.querySelector(\"#\".concat(clone_id));\n\n        var newId = self.__setAttribute(btn, 'data-clone_id', clone_id, prefix);\n\n        if (clonableItem) clonableItem.id = newId;\n      }\n\n      if (clone_name_id) {\n        var clone_name_input = clonedItem.querySelector(\"#\".concat(clone_name_id));\n\n        var newName = self.__setAttribute(btn, 'data-clone_name', clone_name_id, prefix);\n\n        if (clone_name_input) clone_name_input.id = newName;\n      }\n    });\n    deleteBtns.forEach(function (btn) {\n      var clone_id = btn.getAttribute('data-clone_id');\n      if (clone_id) btn.setAttribute('data-clone_id', prefix);\n    });\n  },\n  __getOriginal: function __getOriginal(str) {\n    var original = str;\n    var index = str.indexOf('_');\n    if (index > -1) original = str.substring(index + 1);\n    return original;\n  },\n  __setAttribute: function __setAttribute(element, attrName, value, prefix) {\n    var orgValue = this.__getOriginal(value);\n\n    var newValue = prefix == '' ? orgValue : \"\".concat(prefix, \"_\").concat(orgValue);\n    element.setAttribute(attrName, newValue);\n    return newValue;\n  },\n  __createDnDElementId: function __createDnDElementId(clonedItem) {\n    var dnd_elements = document.querySelectorAll('[data-draggable=\"true\"], [data-droppable=\"true\"]');\n    dnd_elements.forEach(function (el) {\n      el.setAttribute('data-element_id', CoCreateUtils.generateUUID());\n    });\n\n    if (clonedItem.getAttribute('data-draggable') == \"true\" || clonedItem.getAttribute('data-droppable') == \"true\") {\n      clonedItem.setAttribute('data-element_id', CoCreateUtils.generateUUID());\n    }\n  },\n  __getNewPrefix: function __getNewPrefix(clone_name) {\n    var clonedItems = document.querySelectorAll('.clonedItem');\n    var exist = false;\n    clonedItems.forEach(function (el) {\n      var prefix = el.getAttribute('prefix');\n\n      if (clone_name == prefix) {\n        exist = true;\n        return;\n      }\n    });\n\n    if (exist || !clone_name) {\n      return CoCreateUtils.generateUUID(12);\n    } else {\n      return clone_name;\n    }\n  },\n  __sendMessageOfClone: function __sendMessageOfClone(parent, item, id, position) {\n    var document_id = parent.getAttribute('data-document_id') || \"\";\n    var name = parent.getAttribute('name') || \"\";\n    var addtionSelector = \"\";\n\n    if (document_id) {\n      addtionSelector = \"[data-document_id='\".concat(document_id, \"']\");\n    } else {\n      return;\n    }\n\n    if (name) {\n      addtionSelector += \"[name='\".concat(name, \"']\");\n    }\n\n    var value = {};\n\n    if (position == 'after') {\n      value = {\n        'afterend': item.outerHTML\n      };\n    } else {\n      value = {\n        'beforebegin': item.outerHTML\n      };\n    }\n\n    var message = {\n      selector_type: 'querySelector',\n      selector: \"div.domEditor\".concat(addtionSelector, \" #\").concat(id, \".template\"),\n      method: 'insertAdjacentHTML',\n      value: value\n    };\n    CoCreate.sendMessage({\n      rooms: [],\n      emit: {\n        message: 'domEditor',\n        data: message\n      }\n    });\n  },\n  __sendMessageOfDelete: function __sendMessageOfDelete(element_id) {\n    var message = {\n      selector_type: 'getElementById',\n      selector: element_id,\n      method: 'remove'\n    };\n    CoCreate.sendMessage({\n      rooms: [],\n      emit: {\n        message: 'domEditor',\n        data: message\n      }\n    });\n  }\n};\nCoCreateClone.init();\nCoCreateAction.registerEvent(\"cloneAction\", CoCreateClone.cloneElement, CoCreateClone, \"clone-cloned\");\nCoCreateAction.registerEvent(\"createClone\", CoCreateClone.cloneElement, CoCreateClone, \"clone-cloned\");\nCoCreateAction.registerEvent(\"deleteClone\", CoCreateClone.deleteElement, CoCreateClone, \"clone-deleted\");\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CoCreateClone);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/CoCreate-clone.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__("./src/CoCreate-clone.js");
/******/ })()
.default;
});