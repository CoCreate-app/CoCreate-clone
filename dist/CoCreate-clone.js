(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["clone"] = factory();
	else
		root["CoCreate"] = root["CoCreate"] || {}, root["CoCreate"]["clone"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "../CoCreate-components/CoCreate-clone/src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../CoCreate-components/CoCreate-clone/src/index.js":
/*!**********************************************************!*\
  !*** ../CoCreate-components/CoCreate-clone/src/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst CoCreateClone = {\n  __cloneBtnClass: 'cloneBtn',\n  __deleteBtnClass: 'deleteBtn',\n  init: function () {\n    this.__initButtonEvent();\n\n    CoCreate.socket.listen('CoCreateClone-insert', function (data) {\n      let {\n        selector,\n        element_str,\n        position\n      } = data;\n      if (!selector) return;\n      let container = document.querySelector(selector);\n\n      if (container) {\n        if (position == \"after\") position = \"afterend\";else position = \"beforebegin\";\n        container.insertAdjacentHTML(position, element_str);\n      }\n    });\n    CoCreate.socket.listen('CoCreateClone-delete', function (data) {\n      let {\n        element_id\n      } = data;\n      if (!element_id) return;\n      let selected_el = document.getElementById(element_id);\n\n      if (selected_el) {\n        selected_el.remove();\n      }\n    });\n  },\n  __initButtonEvent: function () {// const self = this;\n    // document.addEventListener('click', function(e) {\n    // \tfor (let i=0; i < e.path.length; i++) {\n    // \t\tlet tag = e.path[i];\n    // \t\tif (tag.classList && tag.classList.contains(self.__cloneBtnClass)) {\n    // \t\t\tself.cloneElement(tag)\n    // \t\t}\n    // \t\tif (tag.classList && tag.classList.contains(self.__deleteBtnClass)) {\n    // \t\t\tself.deleteElement(tag)\n    // \t\t}\n    // \t}\n    // }) \n  },\n  cloneElement: function (cloneBtn) {\n    const cloneId = cloneBtn.getAttribute(\"data-clone_id\");\n    const clone_name_id = cloneBtn.getAttribute('data-clone_name');\n    const clone_position = cloneBtn.getAttribute('data-clone_position') || 'before';\n    if (!cloneId) return;\n    let clone_name;\n    let input = document.getElementById(clone_name_id);\n\n    if (input) {\n      clone_name = input.value ? input.value : '';\n    }\n\n    let template = document.getElementById(cloneId);\n    if (!template) return;\n    let clonedItem = template.cloneNode(true);\n\n    if (clonedItem.classList.contains('template')) {\n      clonedItem.classList.remove('template');\n    }\n\n    clonedItem.classList.add('clonedItem'); //// remove data-pass_value_id from clonedItem\n\n    clonedItem.removeAttribute('data-pass_value_id');\n    let tags = clonedItem.querySelectorAll(\"*\");\n    tags.forEach(tag => {\n      tag.removeAttribute('data-pass_value_id');\n    });\n\n    let prefix = this.__getNewPrefix(clone_name); // clonedItem.setAttribute('prefix', prefix);\n\n\n    this.__createDynamicCloneId(clonedItem, prefix); //. create data-element_id for dnd\n\n\n    this.__createDnDElementId(clonedItem);\n\n    if (clone_position === \"after\") {\n      if (template.nextSibling) {\n        template.parentNode.insertBefore(clonedItem, template.nextSibling);\n      } else {\n        template.parentNode.appendChild(clonedItem);\n      }\n    } else {\n      template.parentNode.insertBefore(clonedItem, template);\n    }\n\n    const domEditorEl = CoCreate.htmlTags.findElementByChild(clonedItem);\n\n    if (domEditorEl) {\n      this.__sendMessageOfClone(domEditorEl, clonedItem, cloneId, clone_position);\n    } //. cloned event\n\n\n    document.dispatchEvent(new CustomEvent('change-content', {\n      detail: {\n        element: clonedItem,\n        type: 'clone-create'\n      }\n    }));\n    template.parentNode.dispatchEvent(new CustomEvent('CoCreate-clone', {\n      detail: {\n        type: 'create'\n      }\n    }));\n    document.dispatchEvent(new CustomEvent('clone-cloned', {\n      detail: {\n        element: clonedItem\n      }\n    }));\n  },\n  deleteElement: function (deleteBtn) {\n    let id = deleteBtn.getAttribute('data-clone_id');\n    let item = document.getElementById(id);\n\n    if (item) {\n      const parentNode = item.parentNode;\n      item.remove();\n\n      this.__sendMessageOfDelete(id); //. cloned event\n\n\n      if (parentNode) {\n        document.dispatchEvent(new CustomEvent('change-content', {\n          detail: {\n            element: parentNode,\n            type: 'clone-delete'\n          }\n        }));\n        parentNode.dispatchEvent(new CustomEvent('CoCreate-clone', {\n          detail: {\n            type: 'delete'\n          }\n        }));\n      }\n\n      document.dispatchEvent(new CustomEvent('clone-deleted', {\n        detail: {}\n      }));\n    }\n  },\n  __createDynamicCloneId: function (clonedItem, prefix) {\n    const self = this;\n    let tags = clonedItem.querySelectorAll(\"*\");\n    let cloneBtns = clonedItem.querySelectorAll('.' + this.__cloneBtnClass);\n    let deleteBtns = clonedItem.querySelectorAll('.' + this.__deleteBtnClass);\n    tags = Array.from(tags);\n    tags.push(clonedItem); // tags.forEach((tag) => {\n    // \tlet name = tag.getAttribute('name');\n    // \tif (name) self.__setAttribute(tag, 'name', name, prefix);\n    // })\n    // self.__setAttribute(clonedItem, 'id', clonedItem.id, prefix)\n\n    clonedItem.setAttribute('id', prefix);\n    /** set data-xxxx=\"[prefix][any]\" **/\n\n    tags.forEach(el => {\n      let tag = el.tagName.toLowerCase();\n\n      for (var i = 0; i < el.attributes.length; i++) {\n        const {\n          name,\n          value\n        } = el.attributes[i]; // const changedValue = value.replace(/\\[prefix\\]/g, prefix);\n\n        const changedValue = value.replace(/{{\\s*clone-name\\s*}}/g, prefix);\n\n        if (/{{\\s*clone-name\\s*}}/g.test(value) && name == \"value\") {\n          switch (tag) {\n            case 'input':\n              el.setAttribute(\"value\", changedValue);\n              break;\n\n            case 'textarea':\n              el.setAttribute(\"value\", changedValue);\n              el.textContent = changedValue;\n              break;\n\n            default:\n              el.innerHTML = changedValue;\n          }\n        }\n\n        el.setAttribute(name, changedValue);\n      }\n    });\n    cloneBtns.forEach(btn => {\n      let clone_id = btn.getAttribute('data-clone_id');\n      let clone_name_id = btn.getAttribute('data-clone_name');\n\n      if (clone_id) {\n        let clonableItem = clonedItem.querySelector(`#${clone_id}`);\n\n        let newId = self.__setAttribute(btn, 'data-clone_id', clone_id, prefix);\n\n        if (clonableItem) clonableItem.id = newId;\n      }\n\n      if (clone_name_id) {\n        let clone_name_input = clonedItem.querySelector(`#${clone_name_id}`);\n\n        let newName = self.__setAttribute(btn, 'data-clone_name', clone_name_id, prefix);\n\n        if (clone_name_input) clone_name_input.id = newName;\n      }\n    });\n    deleteBtns.forEach(btn => {\n      let clone_id = btn.getAttribute('data-clone_id');\n      if (clone_id) btn.setAttribute('data-clone_id', prefix);\n    });\n  },\n  __getOriginal: function (str) {\n    let original = str;\n    let index = str.indexOf('_');\n    if (index > -1) original = str.substring(index + 1);\n    return original;\n  },\n  __setAttribute: function (element, attrName, value, prefix) {\n    let orgValue = this.__getOriginal(value);\n\n    let newValue = prefix == '' ? orgValue : `${prefix}_${orgValue}`;\n    element.setAttribute(attrName, newValue);\n    return newValue;\n  },\n  __createDnDElementId: function (clonedItem) {\n    let dnd_elements = document.querySelectorAll('[data-draggable=\"true\"], [data-droppable=\"true\"]');\n    dnd_elements.forEach(el => {\n      el.setAttribute('data-element_id', CoCreate.utils.generateUUID());\n    });\n\n    if (clonedItem.getAttribute('data-draggable') == \"true\" || clonedItem.getAttribute('data-droppable') == \"true\") {\n      clonedItem.setAttribute('data-element_id', CoCreate.utils.generateUUID());\n    }\n  },\n  __getNewPrefix: function (clone_name) {\n    let clonedItems = document.querySelectorAll('.clonedItem');\n    let exist = false;\n    clonedItems.forEach(el => {\n      let prefix = el.getAttribute('prefix');\n\n      if (clone_name == prefix) {\n        exist = true;\n        return;\n      }\n    });\n\n    if (exist || !clone_name) {\n      return CoCreate.utils.generateUUID(12);\n    } else {\n      return clone_name;\n    }\n  },\n  __sendMessageOfClone: function (parent, item, id, position) {\n    const document_id = parent.getAttribute('data-document_id') || \"\";\n    const name = parent.getAttribute('name') || \"\";\n    let addtionSelector = \"\";\n\n    if (document_id) {\n      addtionSelector = `[data-document_id='${document_id}']`;\n    } else {\n      return;\n    }\n\n    if (name) {\n      addtionSelector += `[name='${name}']`;\n    }\n\n    CoCreate.message.send({\n      rooms: [],\n      emit: {\n        message: 'CoCreateClone-insert',\n        data: {\n          selector: `div.domEditor${addtionSelector} #${id}.template`,\n          element_str: item.outerHTML,\n          position: position\n        }\n      }\n    });\n  },\n  __sendMessageOfDelete: function (element_id) {\n    CoCreate.message.send({\n      rooms: [],\n      emit: {\n        message: 'CoCreateClone-remove',\n        data: {\n          element_id: element_id\n        }\n      }\n    });\n  }\n};\nCoCreateClone.init();\nCoCreate.action.init({\n  action: \"cloneAction\",\n  endEvent: \"clone-cloned\",\n  callback: (btn, data) => {\n    CoCreateClone.cloneElement(btn);\n  }\n});\nCoCreate.action.init({\n  action: \"createClone\",\n  endEvent: \"clone-cloned\",\n  callback: (btn, data) => {\n    CoCreateClone.cloneElement(btn);\n  }\n});\nCoCreate.action.init({\n  action: \"deleteClone\",\n  endEvent: \"clone-deleted\",\n  callback: (btn, data) => {\n    CoCreateClone.deleteElement(btn);\n  }\n});\nvar _default = CoCreateClone;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-components/CoCreate-clone/src/index.js\n");

/***/ })

/******/ })["default"];
});